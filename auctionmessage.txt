This code implicitly accepts a Close message and implements the
Sniper's response. We'd like to make this situation explicity before
we add more features. We start by promotiong the anonymous class to a
top-level class in its own right, which means it needs a name. From
our description in the paragraph above, we pick up the word
"translate" and call it an AuctionMessageTranslator, because it will
translate message frome the auction.
The catch is that the current anonymous class picks up the ui field
from Main. We'll have to attach something to our newly promoted class
so that it can respond to a message. The most obvious thing to do is
pass it the MainWindow but we're unhappy about creating a dependency
on a user interface component. That would make it hard to unit-test,
because we'd hve to query the state of a component that's running in
the Swing event thread. 
More significantly, such a dependency would break the "single
reponsiblility" principle which says that unpacking raw messages from
the auction is quite enough for one class to do, without also having
to know how to present the Sniper status. As we wrote in "Designing
for Maintainability"
Given these constraints, we decide that our new
AuctionMessageTranslator will delegeate the handling of an interpreted
event to a collaborator, which we will represent with an
AuctionEventListener interface; we can pass an object that implements
it into the translator on construction. We don't yet know what's in
this interface and we haven't yet begun to think about its
implementation. Our immediate concern is to get the message
translation to work; the rest can wait. 

Our application accepts Price events from the auction, but cannot interpret them yet. We need code that will perform two actions when the currentPrice() method is called:

It feels like this is a good time to introduce what we should call an "Auction Sniper," the component at the heart of our application, so we create an AuctionSniper class. Some of its intened behavior is currently buried in Main, and a good start would be to extract it into our new class, it will take a little effort. 
 Given that an AuctionSniper should respond to Price events, we decide to make it implement AuctionEventListener rather than Main. The question is what to do about the user interface. If we consider moving this method:


Sending a Bid
An Auction Interface
After the usual discussion, we decide to introduce a new collaborator, an Auction. Auction and SniperListener repesent two different domains in the application: Auction is about financial transactions, it accepts bids for items in changes to the current state of the Sniper. Auction is a dependency, AuctionSniper is a notification. 
